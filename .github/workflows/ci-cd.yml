name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Backend .NET Build and Test
  backend-build-test:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: YourStrong@Passw0rd123
        ports:
          - 1433:1433
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd123' -Q 'SELECT 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache .NET packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore InvoiceManagement.Server/InvoiceManagement.Server.csproj

    - name: Build backend
      run: dotnet build InvoiceManagement.Server/InvoiceManagement.Server.csproj --configuration Release --no-restore

    - name: Run backend tests
      run: dotnet test InvoiceManagement.Server/InvoiceManagement.Server.csproj --configuration Release --no-build --verbosity normal
      env:
        ConnectionStrings__DefaultConnection: "Server=localhost;Database=InvoiceManagementDb;User Id=sa;Password=YourStrong@Passw0rd123;TrustServerCertificate=true;MultipleActiveResultSets=true"

    - name: Publish backend
      run: dotnet publish InvoiceManagement.Server/InvoiceManagement.Server.csproj --configuration Release --no-build --output ./publish

  # Frontend React Build and Test
  frontend-build-test:
    name: Frontend Build & Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: invoicemanagement.client/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd invoicemanagement.client
        npm ci

    - name: Run frontend linting
      run: |
        cd invoicemanagement.client
        npm run lint

    - name: Build frontend
      run: |
        cd invoicemanagement.client
        npm run build

    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: invoicemanagement.client/dist/

  # Docker Build and Test
  docker-build-test:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [backend-build-test, frontend-build-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./InvoiceManagement.Server/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./invoicemanagement.client
        file: ./invoicemanagement.client/Dockerfile
        target: production
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker Compose
      run: |
        docker compose -f docker-compose.yml config
        docker compose -f docker-compose.yml build

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [docker-build-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Code Quality
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: |
        dotnet restore InvoiceManagement.Server/InvoiceManagement.Server.csproj
        cd invoicemanagement.client && npm ci

    - name: Run SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=invoice-management
          -Dsonar.organization=your-org
          -Dsonar.sources=.
          -Dsonar.host.url=https://sonarcloud.io

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Start services with Docker Compose
      run: |
        docker compose up -d sqlserver adminer backend
        sleep 30

    - name: Wait for services to be ready
      run: |
        timeout 300 bash -c 'until curl -f http://localhost:5000/health; do sleep 5; done'

    - name: Run integration tests
      run: |
        # Add your integration test commands here
        curl -f http://localhost:5000/api/health || exit 1
        curl -f http://localhost:8080 || exit 1

    - name: Stop services
      run: docker compose down

  # Deploy to Staging (if on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-build-test, frontend-build-test, docker-build-test, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        # Add your staging deployment commands here
        # This could be deploying to a staging server, Kubernetes, etc.

  # Notify on Success/Failure
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [backend-build-test, frontend-build-test, docker-build-test, security-scan]
    if: always()

    steps:
    - name: Notify Success
      if: ${{ needs.backend-build-test.result == 'success' && needs.frontend-build-test.result == 'success' && needs.docker-build-test.result == 'success' }}
      run: |
        echo "‚úÖ All checks passed successfully!"

    - name: Notify Failure
      if: ${{ needs.backend-build-test.result == 'failure' || needs.frontend-build-test.result == 'failure' || needs.docker-build-test.result == 'failure' }}
      run: |
        echo "‚ùå Some checks failed. Please review the logs."
