name: Build and Test Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual trigger

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  # 1. Backend Build and Test
  backend-build-test:
    name: Backend Build & Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache .NET packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore backend dependencies
      run: dotnet restore InvoiceManagement.Server/InvoiceManagement.Server.csproj

    - name: Restore test dependencies
      run: dotnet restore InvoiceManagement.Server.Tests/InvoiceManagement.Server.Tests.csproj

    - name: Build backend
      run: dotnet build InvoiceManagement.Server/InvoiceManagement.Server.csproj --configuration Release --no-restore

    - name: Run backend tests
      run: dotnet test InvoiceManagement.Server.Tests/InvoiceManagement.Server.Tests.csproj --configuration Release --no-build --verbosity normal --logger "console;verbosity=normal"
      continue-on-error: true

    - name: Publish backend
      run: dotnet publish InvoiceManagement.Server/InvoiceManagement.Server.csproj --configuration Release --no-build --output ./publish

  # 2. Frontend Test
  frontend-test:
    name: Frontend Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: invoicemanagement.client/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd invoicemanagement.client
        npm ci

    - name: Run frontend tests
      run: |
        cd invoicemanagement.client
        npm test -- --watchAll=false
      continue-on-error: true

  # 3. Docker Build Test
  docker-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-build-test, frontend-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Test Docker Compose configuration
      run: |
        docker compose config
        echo "✅ Docker Compose configuration is valid"

    - name: Test Docker Compose build
      run: |
        docker compose build
        echo "✅ Docker Compose build successful"

  # 4. Artifact Packaging
  package-artifacts:
    name: Package Artifacts
    runs-on: ubuntu-latest
    needs: [backend-build-test, frontend-test, docker-test]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore backend dependencies
      run: dotnet restore InvoiceManagement.Server/InvoiceManagement.Server.csproj

    - name: Build backend
      run: dotnet build InvoiceManagement.Server/InvoiceManagement.Server.csproj --configuration Release --no-restore

    - name: Publish backend
      run: dotnet publish InvoiceManagement.Server/InvoiceManagement.Server.csproj --configuration Release --no-build --output ./publish

    - name: Create artifacts directory
      run: mkdir -p artifacts

    - name: Package backend artifact
      run: |
        mkdir -p artifacts/backend
        cp -r ./publish/* artifacts/backend/
        echo "Backend artifact packaged successfully"

    - name: Package frontend artifact
      run: |
        mkdir -p artifacts/frontend
        cp -r ./invoicemanagement.client/src/* artifacts/frontend/
        cp ./invoicemanagement.client/package.json artifacts/frontend/
        cp ./invoicemanagement.client/package-lock.json artifacts/frontend/
        cp ./invoicemanagement.client/vite.config.ts artifacts/frontend/
        cp ./invoicemanagement.client/tsconfig.json artifacts/frontend/
        echo "Frontend source artifact packaged successfully"

    - name: Create version info
      run: |
        echo "Build Date: $(date)" > artifacts/build-info.txt
        echo "Commit SHA: ${{ github.sha }}" >> artifacts/build-info.txt
        echo "Commit Message: ${{ github.event.head_commit.message }}" >> artifacts/build-info.txt
        echo "Branch: ${{ github.ref_name }}" >> artifacts/build-info.txt

    - name: Upload backend artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-${{ github.sha }}
        path: artifacts/backend/
        retention-days: 30

    - name: Upload frontend artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-${{ github.sha }}
        path: artifacts/frontend/
        retention-days: 30

    - name: Upload build info
      uses: actions/upload-artifact@v4
      with:
        name: build-info-${{ github.sha }}
        path: artifacts/build-info.txt
        retention-days: 30

  # 5. Docker Hub Push
  docker-push:
    name: Push to Docker Hub
    runs-on: ubuntu-latest
    needs: [docker-test]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push backend image
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/invoice-backend:${{ github.sha }} ./InvoiceManagement.Server
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/invoice-backend:latest ./InvoiceManagement.Server
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/invoice-backend:${{ github.sha }}
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/invoice-backend:latest

    - name: Build and push frontend image
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/invoice-frontend:${{ github.sha }} ./invoicemanagement.client
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/invoice-frontend:latest ./invoicemanagement.client
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/invoice-frontend:${{ github.sha }}
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/invoice-frontend:latest

  # 6. Pipeline Success Notification
  notify-success:
    name: Pipeline Success
    runs-on: ubuntu-latest
    needs: [backend-build-test, frontend-test, docker-test, package-artifacts, docker-push]
    if: always()

    steps:
    - name: Notify Success
      if: ${{ needs.backend-build-test.result == 'success' && needs.frontend-test.result == 'success' && needs.docker-test.result == 'success' && needs.package-artifacts.result == 'success' }}
      run: |
        echo "✅ All checks passed successfully!"
        echo "🎉 Pipeline completed successfully"
        echo "📝 Backend: Built, tested, and packaged"
        echo "📝 Frontend: Tested and packaged"
        echo "📝 Docker: Configuration validated"
        echo "📦 Artifacts: Packaged and uploaded"
        echo "🐳 Docker: Images pushed to Docker Hub"

    - name: Notify Failure
      if: ${{ needs.backend-build-test.result == 'failure' || needs.frontend-test.result == 'failure' || needs.docker-test.result == 'failure' || needs.package-artifacts.result == 'failure' }}
      run: |
        echo "❌ Some checks failed. Please review the logs."
        echo "🔍 Check the failed jobs for details"
