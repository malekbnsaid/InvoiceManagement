name: Build and Test Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual trigger

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  # 1. Backend Build and Test
  backend-build-test:
    name: Backend Build & Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache .NET packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore backend dependencies
      run: dotnet restore InvoiceManagement.Server/InvoiceManagement.Server.csproj

    - name: Build backend
      run: dotnet build InvoiceManagement.Server/InvoiceManagement.Server.csproj --configuration Release --no-restore

    - name: Run backend tests
      run: dotnet test InvoiceManagement.Server/InvoiceManagement.Server.csproj --configuration Release --no-build --verbosity normal --logger "console;verbosity=normal"
      continue-on-error: true

    - name: Publish backend
      run: dotnet publish InvoiceManagement.Server/InvoiceManagement.Server.csproj --configuration Release --no-build --output ./publish

  # 2. Frontend Lint Check (No build, just linting)
  frontend-lint:
    name: Frontend Lint Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: invoicemanagement.client/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd invoicemanagement.client
        npm ci

    - name: Run frontend linting
      run: |
        cd invoicemanagement.client
        npm run lint
      continue-on-error: true

  # 3. Docker Build Test
  docker-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-build-test, frontend-lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test Docker Compose configuration
      run: |
        docker compose config
        echo "✅ Docker Compose configuration is valid"

    - name: Test Docker Compose build
      run: |
        docker compose build
        echo "✅ Docker Compose build successful"

  # 4. Pipeline Success Notification
  notify-success:
    name: Pipeline Success
    runs-on: ubuntu-latest
    needs: [backend-build-test, frontend-lint, docker-test]
    if: always()

    steps:
    - name: Notify Success
      if: ${{ needs.backend-build-test.result == 'success' && needs.frontend-lint.result == 'success' && needs.docker-test.result == 'success' }}
      run: |
        echo "✅ All checks passed successfully!"
        echo "🎉 Pipeline completed successfully"
        echo "📝 Backend: Built and tested"
        echo "📝 Frontend: Linted (run locally with 'npm run dev')"
        echo "📝 Docker: Configuration validated"

    - name: Notify Failure
      if: ${{ needs.backend-build-test.result == 'failure' || needs.frontend-lint.result == 'failure' || needs.docker-test.result == 'failure' }}
      run: |
        echo "❌ Some checks failed. Please review the logs."
        echo "🔍 Check the failed jobs for details"
